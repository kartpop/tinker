prompt_dev = """

You are an AI assistant that generates Python scripts using Matplotlib to create diagrams illustrating science concepts.

You may be doing this task for the first time or as a redo based on feedback. 

Your output should be a json object with the following keys:
{
    "plan": "Your pseudocode plan or your steps to improve the diagram based on feedback.",
    "code": "Your Python code to generate the diagram.",
}

If you are doing this task for the first time:

- **Analyze** the text and identify key concepts that can be visually represented.
    - **Concepts**: The text will contain scientific concepts.
- **Scientific Accuracy**: Ensure the diagram is scientifically accurate and correctly represents the concepts.
- **Easy Digestion**: Make the diagram easy to understand and digest, ensuring that the key concepts are clearly communicated.
- **Plan** step-by-step what to include in the diagram, and write this plan in pseudocode with great detail.


If you are doing this task as a REDO:

- **Thoroughly review** your previous work and the subsequent feedback before proceeding.
    - Read previously generated code
    - Look keenly at the image generated by the code
    - Review the feedback provided
- **Plan your approach** to improving the diagram based on the above steps. Write this plan in pseudocode.
    - You may even decide to start from scratch with a new diagram if the feedback warrants it.
- **Aim to improve your performance** based on the feedback provided. Specifically, focus on the following:
    - **Scientific Accuracy**: Ensure the diagram accurately represents the scientific concept.
    - **Clarity**: Make the diagram as clear and easy to understand as possible. Consider labels, colors, and other visual elements.
    - **Adhere to Feedback**: If feedback exists in previous chat completion messages, adhere to the feedback strictly.


For both FIRST TIMERS and REDOERS:

- **Assume** that the following imports have been made:
        `import matplotlib.pyplot as plt
        import numpy as np`
- **Code output** the complete Python code in a single code block.
    - **DO NOT** include the imports in the code block.
    - **DO NOT** include the `plt.show()` function in the code block.

Your code should be complete and runnable as-is to generate the diagram.

Adhere STRICTLY to the output format specified:
{
    "plan": "...",
    "code": "...",
}

"""

prompt_qa = """

You are an AI assistant that critiques Matplotlib diagrams, especially those illustrating STEM concepts.

Your task is as follows:

1. **Analyze** the diagram provided.
2. **Identify** flaws in the diagram. Flaws can be both:
    - **Conceptual**: Errors in the representation of the underlying STEM concepts, inaccuracies in the data, or misinterpretations of the scientific principles.
    - **Visual**: Issues with clarity, labeling, aesthetics, color choices, or any elements that may cause confusion or misinterpretation.
3. **Provide a detailed critique**:
    - **Visual Flaws**: Describe each visual flaw clearly and suggest specific improvements.
    - **Conceptual Flaws**: Pinpoint exact conceptual faults, explain why they are incorrect, and provide step-by-step instructions to resolve them.
4. **If the diagram is correct** and has no flaws, state that it is correct.
5. **If the diagram is incorrect** or can be improved, provide clear, detailed, and actionable instructions for improving the diagram. These instructions should include:
    - Specific changes to the visual elements (e.g., labels, colors, line styles).
    - Corrections to the conceptual representation (e.g., correct formulas, accurate data representation).
    - If necessary, suggest completely redoing the work with a new approach or diagram.
6. **Ensure clarity and precision**: Your critique should be easy to understand and implement, with no ambiguity.

**IMPORTANT**: Identifying conceptual flaws is of paramount importance. The diagram must accurately represent the scientific concept it is illustrating.

Adhere STRICTLY to the output format specified:
{
    "correct": true/false, # true if the diagram is correct, false otherwise
    "feedback": "...",
}

"""

import datetime
import json
import base64
import requests
from openai import OpenAI
import os
import matplotlib.pyplot as plt
import numpy as np


def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")


def generate_matplotlib_diagram(concept: str, max_turns: int = 5) -> str:
    client = OpenAI()
    history = []
    concept_message = {"role": "user", "content": concept}
    # history.append(concept_message)

    sub_folder = datetime.datetime.now().strftime("%d-%b-%Y-%H%M%S")
    folder = "/aux/src/tinker/scratch/nbs/agentic/diagramer/diagrams"

    # Create folder and sub_folder if they do not exist
    if not os.path.exists(folder):
        os.mkdir(folder)

    sub_folder_path = os.path.join(folder, sub_folder)
    if not os.path.exists(sub_folder_path):
        os.mkdir(sub_folder_path)

    prompt_tokens, completion_tokens, total_tokens = 0, 0, 0

    try:

        for i in range(max_turns):
            # Generate diagram

            messages = [{"role": "system", "content": prompt_dev}, concept_message] + history

            response = client.chat.completions.create(
                model="gpt-4o-mini",  # Replace with the correct engine name
                n=1,
                temperature=0.7,
                messages=messages,
            )

            generated_diagram_message = response.choices[0].message
            plot_code_message = {"role": "assistant", "content": generated_diagram_message.content}
            history = [plot_code_message]

            prompt_tokens += response.usage.prompt_tokens
            completion_tokens += response.usage.completion_tokens
            total_tokens += response.usage.total_tokens

            try:
                response_data = json.loads(generated_diagram_message.content)
                plan = response_data.get("plan", "")
                code = response_data.get("code", "")
            except json.JSONDecodeError:
                print("Error decoding JSON from LLM response.")
                print("Response content:", generated_diagram_message.content)
                break

            # Log the plan (you can modify this as needed)
            print(f"Plan for {i}: {plan}\n")
            print(f"Code for {i}: {code}\n")

            # Execute the generated code to create the diagram
            try:
                exec(code, globals())
            except Exception as e:
                print(
                    f"Error executing generated code:\n\ncode:\n{code}\n\nerror:\n{e}"
                )
                user_message = {
                    "role": "user",
                    "content": f"Error executing generated code, please fix the code:\n{e}",
                }
                history.append(user_message)
                continue

            image_filename = f"diagram_{i}.png"
            image_path = os.path.join(sub_folder_path, image_filename)

            try:
                plt.savefig(image_path, format="png", dpi=300, bbox_inches="tight")
                plt.close()  # Close the plot to free memory
            except Exception as e:
                print(f"Error saving the diagram: {e}")
                break

            base64_image = encode_image(image_path)

            user_image_message = {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "This is the diagram generated after execution of the code generated by the AI assistant.",
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}",
                            "detail": "low",
                        },
                    },
                ],
            }
            history.append(user_image_message)

            # Get feedback
            feedback_messages = [{"role": "system", "content": prompt_qa}, concept_message] + history

            feedback_response = client.chat.completions.create(
                model="gpt-4o-mini",  # Replace with the correct engine name
                n=1,
                temperature=0.7,
                messages=feedback_messages,
            )
            
            prompt_tokens += feedback_response.usage.prompt_tokens
            completion_tokens += feedback_response.usage.completion_tokens
            total_tokens += feedback_response.usage.total_tokens

            feedback = feedback_response.choices[0].message
            feedback_message = {"role": "assistant", "content": feedback.content}

            print(f"Feedback received: {feedback.content}")

            try:
                # history.append(json.loads(feedback_message.model_dump_json()))
                # Check if the diagram is correct
                history = [plot_code_message, user_image_message, feedback_message]
                feedback_content = json.loads(feedback.content)
                if feedback_content.get("correct", False):
                    print("Diagram is correct.")

                    return image_path, prompt_tokens, completion_tokens, total_tokens
            except json.JSONDecodeError:
                history.append(
                    {"role": "assistant", "content": feedback.content}
                )

    except Exception as e:
        print(f"Error occurred: {e}")
        return image_path if image_path else "No image generated"
    finally:
        log_path = os.path.join(sub_folder_path, "log.json")
        try:
            with open(log_path, "w") as log_file:
                json.dump(history, log_file, indent=4)
            print(f"Log saved at: {log_path}")
        except Exception as e:
            print(f"Failed to save log: {e}")

    print("Maximum iterations reached.")
    image_path = image_path if image_path else "No image generated."
    return image_path, prompt_tokens, completion_tokens, total_tokens


def main():
    concept_text = """Planes fly through a combination of four fundamental forces: lift, weight (gravity), thrust, and drag. Let's break this down into smaller parts to understand how each of these forces works together to get a plane airborne:

    1. **Lift**: This is the force that allows planes to rise off the ground. It's generated by the wings of the plane. Imagine a bird flapping its wings. As air flows over and under the wings, it creates a difference in air pressure. The shape of the wing (called an airfoil) is designed so that air moves faster over the top of the wing than underneath it. According to Bernoulli's principle, the faster air on top creates a lower pressure compared to the higher pressure underneath. This pressure difference creates lift, allowing the plane to ascend.

    2. **Weight (Gravity)**: Weight is the force acting downwards due to gravity. It pulls the plane towards the Earth. For a plane to take off, the lift generated must be greater than the weight of the plane in order to rise into the sky.

    3. **Thrust**: This is the force that propels the plane forward. It is produced by the plane's engines. You can think of thrust as the car's accelerator. Just like stepping on the gas makes a car go forward, the engines generate thrust, pushing the plane ahead. The more powerful the engines, the greater the thrust.

    4. **Drag**: This is the resistance the plane faces as it moves through the air, similar to how you feel resistance when you put your hand out of a moving car's window. Drag works against the thrust, trying to slow the plane down. Aircraft designers work hard to create shapes that minimize drag, making it easier for planes to fly.

    When you put it all together: during takeoff, the engines generate thrust, pushing the plane down the runway. As speed increases, the wings generate lift. Once lift surpasses weight, the plane rises into the sky. While in flight, thrust keeps the plane moving forward, while lift works to keep it up, with drag and weight constantly pulling back."""

    image_path, prompt_tokens, completion_tokens, total_tokens = generate_matplotlib_diagram(concept_text)
    print(f"Diagram saved at: {image_path}")
    print(f"Prompt tokens: {prompt_tokens}")
    print(f"Completion tokens: {completion_tokens}")
    print(f"Total tokens: {total_tokens}")


if __name__ == "__main__":
    main()
